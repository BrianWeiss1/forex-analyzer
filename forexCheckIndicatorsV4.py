from src.longTermPos import checkLuquidation, checkLuquidationV1, findSelection
import sys
import requests
from SpecialFunctions import formatDataset, formatDataset1, formatDataset3, formatDataset2
from src.underliningProcesses import swap
from src.functions import get_StochasticOscilator, get_StochasticRelitiveStrengthIndex, get_supertrend
from datetime import datetime, timedelta
import numpy as np
import random
import time

api_key = "d6e8542914aa439e92fceaccca1c2708"
api_key2= "0d27bad2c7854a18bc4cafcb5d7f3583"
def grabForex(values, symbol="USD/NZD", api_key2="0d27bad2c7854a18bc4cafcb5d7f3583"):
    base_url = "https://api.twelvedata.com/time_series"
    '''
    GBPUSD=X/GBP/USD
    AUDUSD=X/AUD/USD
    NZDUSD=X/NZD/USD
    EURJPY=X/EUR/JPY
    GBPJPY=X/GBP/JPY
    EURGBP=X/EUR/GBP
    EURCAD=X/EUR/CAD
    EURSEK=X/EUR/SEK
    EURCHF=X/EUR/CHF
    EURHUF=X/EUR/HUF
    EURJPY=X/EUR/JPY
    CNY=X/USD/CNY
    HKD=X/USD/HKD
    SGD=X/USD/SGD
    INR=X/USD/INR
    MXN=X/USD/MXN
    PHP=X/USD/PHP
    IDR=X/USD/IDR
    THB=X/USD/THB
    MYR=X/USD/MYR
    ZAR=X/USD/ZAR
    RUB=X/USD/RUB
    '''
    params = {
        "symbol": symbol, #USD/NZD 0.003, NZD/USD 0.002
        "interval": "30min",
        "outputsize": values,
        "apikey": api_key2
        
    }

    # Make the API request
    response = requests.get(base_url, params=params)
    data = response.json()
    # ForexData = open('documents/forexData.txt', 'w')
    # ForexData.write(str(data['values']))
    # ForexData.close()
    return data['values']

def simulateCrypto(df, aVal, bVal, cVal):
    printing = False
    printingSpecific = True
    totalPips = 0
    countPips = 0
    bestAvgPips = -sys.maxsize
    worstAvgPips = sys.maxsize
    df = df.dropna()
    bestSpecialValue = -sys.maxsize
    worstSpecialValue = sys.maxsize
    j = -1
    k = -1
    pos = 0
    AvgPercent = 0
    nuet = 0
    countrUp = 0
    neg = 0
    BestProfilio = -sys.maxsize
    WorseProfilio = sys.maxsize
    Bestj = -1
    Bestk = -1
    worstk = -1
    worstj = -1
    bestAvgj = -1
    bestAvgk = -1
    worstAvgj = -1
    worstAvgk = -1
    BestSpecialValues = (0, 0)
    WorstSpecialValues = (0, 0)

    oldj = -1
    portfolio = 10
    countPos = 0
    countNeg = 0
    posPips = 0
    countr = 0
    negPips = 0
    avgPips = 0
    nowPrice = 0
    nowCount = 0
    repeatA = repeatB = repeatC = False


    longRunSTOCHRSI1 = {"buySignal": False, 'luquidate': False, 'entry': []}    
    shortRunSTOCHRSI1 = {'shortSignal': False, 'luquidate': False, 'entry': []}
    previousSellStochasticRSI1 = previousBuyStochasticRSI1 = False
    lstSpecialNumsDECLINE = []
    lstSpecialNumsINCLINE = []
    
#get_StochasticRelitiveStrengthIndex(df, 258, 19, 161) -0.0022 #1
#get_StochasticRelitiveStrengthIndex(df, 18, 217, 289) -0.00147#2
#get_StochasticRelitiveStrengthIndex(df, 276, 296, 18) -0.0027 #3
#get_StochasticRelitiveStrengthIndex(df, 53, 327, 132) -0.00212#4
#get_StochasticRelitiveStrengthIndex(df, 267, 291, 11) -0.00289#5
#get_StochasticRelitiveStrengthIndex(df, 125, 285, 151)-0.0022 #6
#get_StochasticRelitiveStrengthIndex(df, 149, j, 235)  -0.0014 #7
#get_StochasticRelitiveStrengthIndex(df, 306, 297, 13) -0.00294#8
#get_StochasticRelitiveStrengthIndex(df, 304, 18, 145) -0.00224#9
#get_StochasticRelitiveStrengthIndex(df, 451, 17, 212) -0.00353
#get_StochasticRelitiveStrengthIndex(df, 91, 304, 699) -0.0027
#get_StochasticRelitiveStrengthIndex(df, 106, 261, 417)-0.0021
#get_StochasticRelitiveStrengthIndex(df, 255, 298, 15) -0.00302
#get_StochasticRelitiveStrengthIndex(df, 236, 4, 219)  -0.0018
#get_StochasticRelitiveStrengthIndex(df, 321, 5, 584)  -0.00426
#get_StochasticRelitiveStrengthInde(df, 69, 1273, 1120)-0.00306
#get_StochasticRelitiveStrengthIndex(df, 1223, 4, 487) -0.00527
#get_StochasticRelitiveStrengthIndex(df, 1217, 138, 52)-0.00263
#get_StochasticRelitiveStrengthIndex(df, 495, 4, 496)  -0.0051
#get_StochasticRelitiveStrengthIndex(df, 419, j, 416)  -0.00344
#get_StochasticRelitiveStrengthIndex(df, 230, 20, 860) -0.003
#get_StochasticRelitiveStrengthIndex(df, 11, 318, 126))
#get_StochasticRelitiveStrengthIndex(df, 161, 3, 316)
#get_StochasticRelitiveStrengthIndex(df, 1056, 41, 6)
#get_StochasticRelitiveStrengthIndex(df, 521, 321, 73)
#get_StochasticRelitiveStrengthIndex(df, 10, 130, 148)
#get_StochasticRelitiveStrengthIndex(df, 12, 298, 78)
#get_StochasticRelitiveStrengthIndex(df, 640, 14, 374)
#get_StochasticRelitiveStrengthIndex(df, 255, 317, 85)
#get_StochasticRelitiveStrengthIndex(df, 315, 325, 90)
#get_StochasticRelitiveStrengthIndex(df, 345, 311, 45)
#get_StochasticRelitiveStrengthIndex(df, 686, 4, 984)
#get_StochasticRelitiveStrengthIndex(df, 16, 298, 252)
#get_StochasticRelitiveStrengthIndex(df, 366, 3, 1017)
#get_StochasticRelitiveStrengthIndex(df, 422, 120, 120)
#get_StochasticRelitiveStrengthIndex(df, 433, 120, 123)
#get_StochasticRelitiveStrengthIndex(df, 18, 1325, 157)
#get_StochasticRelitiveStrengthIndex(df, 874, 7, 805)
#get_StochasticRelitiveStrengthIndex(df, 7, 122, 140)
#get_StochasticRelitiveStrengthIndex(df, 9, 145, 361)
#get_StochasticRelitiveStrengthIndex(df, 321, 7, 150)
#get_StochasticRelitiveStrengthIndex(df, 335, 9, 173)
#get_StochasticRelitiveStrengthIndex(df, 315, 5, 151)
#get_StochasticRelitiveStrengthIndex(df, 304, 10, 356)
#get_StochasticRelitiveStrengthIndex(df, 643, 176, 18)
#get_StochasticRelitiveStrengthIndex(df, 32, 1302, 876)
#get_StochasticRelitiveStrengthIndex(df, 209, 24, 360)
#get_StochasticRelitiveStrengthIndex(df, 409, 3, 240)
#get_StochasticRelitiveStrengthIndex(df, 515, 9, 236)
#get_StochasticRelitiveStrengthIndex(df, 633, 29, 690)
#get_StochasticRelitiveStrengthIndex(df, 347, 310, 34)
#get_StochasticRelitiveStrengthIndex(df, 303, 295, 54)


#STOCH RSI CHECK ALL INDICATORS: how? run this through each one, loop through them all

    SpecialValue = 0
    # print(df)
    # countAAA = 0
    try:
        for j in range(1, 2):
            if printingSpecific: 
                if j != oldj:
                    oldj = j
            stochRSIK1, stochRSID1 = get_StochasticRelitiveStrengthIndex(df, aVal, bVal, cVal)
                
                
        
            stochRSIK1 = stochRSIK1.values
            stochRSID1 = stochRSID1.values

            for i in range(len(df)):
                
                nowPrice += df['close'][i]
                nowCount += 1
                
                #--------STOCH1RSI----------#
                longRunSTOCHRSI1, shortRunSTOCHRSI1 = findSelection(previousBuyStochasticRSI1, previousSellStochasticRSI1, longRunSTOCHRSI1, shortRunSTOCHRSI1, i) 
                shortRunSTOCHRSI1, longRunSTOCHRSI1, pos, nuet, neg, portfolio, totalPips, countPips, posPips, countPos, negPips, countNeg = checkLuquidationV1(shortRunSTOCHRSI1, longRunSTOCHRSI1, df, i, pos, nuet, neg, portfolio, totalPips, countPips, posPips, countPos, negPips, countNeg)
    
                previousSellStochasticRSI1 = previousBuyStochasticRSI1 = False

                if stochRSIK1[i-1] > stochRSID1[i-1] and stochRSIK1[i] < stochRSID1[i]:
                    previousSellStochasticRSI1 = True
                if stochRSIK1[i-1] < stochRSID1[i-1] and stochRSIK1[i] > stochRSID1[i]:
                    previousBuyStochasticRSI1 = True
                    
                # previousBuyStochasticRSI1, previousSellStochasticRSI1 = swap(previousBuyStochasticRSI1, previousSellStochasticRSI1)
                
                if previousSellStochasticRSI1 and previousBuyStochasticRSI1:
                    previousBuyStochasticRSI1 = False
                    previousSellStochasticRSI1 = False   
                #--------STOCH1RSI----------#  
                
            try:
                percentOfTrades = round(((pos + nuet + neg) / len(df)) * 100, 2)
                AvgPrice = nowPrice / nowCount

                avgPips = totalPips / countPips
                negPip = np.where(neg != 0, negPips / neg, 0)

                posPercent = round((posPips / pos / AvgPrice), 5)
                negPercent = round((negPip / AvgPrice), 5)
                AvgPercent = round((avgPips / AvgPrice), 5)

                difference = (posPercent + negPercent)
                correctness = round((pos / (neg + pos)), 2)
                accuracy = correctness - 0.5
                tradeDecimal = percentOfTrades / 100
                
                
                # if printing:
                #     print("NEGITIVE PIPS: " + str(negPip))
                #     print("AVERAGE %: " + str(AvgPercent))
                #     print("POS %: " + str(posPercent))
                #     print("NEG %: " + str(negPercent))
                # leverage = 50
                # if printing:
                #     print(f"{leverage}X LEVERAGE")
                #     print("AVERAGE %: " + str(AvgPercent*leverage))
                #     print("POS %: " + str(posPercent*leverage))
                #     print("NEG %: " + str(negPercent*leverage))
                # if printing:
                #     print(SpecialValue)
                # p = (pos / (neg + pos))
                # q = 1-p
                # t = (((posPips/(pos)/AvgPrice)*leverage)/100)+1
                # s = ((negPip/AvgPrice)*leverage/100)+1
                # KellyCriterum = p/s - q/t
                # if printing:
                #     print("Best Bet %: " + str(KellyCriterum))
                # if printing:
                #     try:
                #         print("POS/NEG RATIO: " + str(pos / neg))
                #         print(
                #             "Percentage Correct: " + str(round((pos / (neg + pos)) * 100, 2)) + "%"
                #         )
                #     except: 
                #         print("ERROR 404")
                #     print("CANDLES: " + str(len(df) - 2))
                #     print(
                #         "PERCENT OF TRADES: "
                #         + str(percentOfTrades)
                #     )
                #     print("protfilio: " + str(portfolio))
                # if printing:
                #     print("AVERAGE PIPS: " + str(totalPips/countPips))
                #     print("POSITIVE PIPS: " + str(posPips/(countPos)))
            except ZeroDivisionError:
                if printing:
                    print("ERROR GO BRRRR")
            pos = nuet = neg = 0
            try: 
                SpecialValue = difference * accuracy * tradeDecimal
                # print(SpecialValue)
                # if SpecialValue < 0:
                #     lstSpecialNumsDECLINE.append([(31, 290, 36),SpecialValue])
                #     lstSpecialNumsDECLINE = sorted(lstSpecialNumsDECLINE, key=lambda x: x[1])
                #     # print(lstSpecialNumsDECLINE)
                #     countr += 1
                #     if countr > 100:
                #         lstSpecialNumsDECLINE.pop()
                #         # print(len(lstSpecialNumsDECLINE))
                # if SpecialValue > 0:
                #     lstSpecialNumsINCLINE.append([(31, 290, 36),SpecialValue])
                #     lstSpecialNumsINCLINE = sorted(lstSpecialNumsINCLINE, key=lambda x: x[1], reverse=True)
                #     # print(lstSpecialNumsINCLINE)
                #     countrUp += 1
                #     if countrUp > 100:
                #         lstSpecialNumsINCLINE.pop()
                #         # print(len(lstSpecialNumsINCLINE))
                        
                if SpecialValue > bestSpecialValue:
                    bestSpecialValue = SpecialValue
                    BestSpecialValues = (j, k)
                if SpecialValue < worstSpecialValue:
                    worstSpecialValue = SpecialValue
                    WorstSpecialValues = (j, k)
            except:
                if printing:
                    print("ERROR")
                
            if avgPips*percentOfTrades > bestAvgPips and avgPips > 52000:
                bestAvgPips = avgPips*percentOfTrades
                bestAvgj = j
                bestAvgk = k
            if avgPips*percentOfTrades < worstAvgPips:
                worstAvgPips = avgPips*percentOfTrades
                worstAvgj = j
                worstAvgk = k
            if portfolio > BestProfilio:
                BestProfilio = portfolio
                Bestj = j
                Bestk = k
            elif portfolio < WorseProfilio:
                WorseProfilio = portfolio
                worstj = j
                worstk = k
            portfolio = 10
            negPips = 0
            posPips = 0
            totalPips = 0
            countPips = 0
            countPos = 0
            countNeg = 0
        #SEPERATE WHEN TABBING
        
#        return bestSpecialValue, worstSpecialValue, BestSpecialValues, WorstSpecialValues, worstk, worstj, bestAvgPips, bestAvgj, bestAvgk, worstAvgPips, worstAvgk, worstAvgj, AvgPercent, SpecialValue, lstSpecialNumsINCLINE, lstSpecialNumsDECLINE
        return bestSpecialValue, BestSpecialValues, worstSpecialValue, WorstSpecialValues
    except KeyboardInterrupt:
        return bestSpecialValue, BestSpecialValues, worstSpecialValue, WorstSpecialValues




if "__main__" == __name__:
    # import re

    # original_list = [
    #     "GBPUSD=X/GBP/USD",
    #     "AUDUSD=X/AUD/USD",
    #     "NZDUSD=X/NZD/USD",
    #     "EURJPY=X/EUR/JPY",
    #     "GBPJPY=X/GBP/JPY",
    #     "EURGBP=X/EUR/GBP",
    #     "EURCAD=X/EUR/CAD",
    #     "EURSEK=X/EUR/SEK",
    #     "EURCHF=X/EUR/CHF",
    #     "EURHUF=X/EUR/HUF",
    #     "EURJPY=X/EUR/JPY",
    #     "CNY=X/USD/CNY",
    #     "HKD=X/USD/HKD",
    #     "SGD=X/USD/SGD",
    #     "INR=X/USD/INR",
    #     "MXN=X/USD/MXN",
    #     "PHP=X/USD/PHP",
    #     "IDR=X/USD/IDR",
    #     "THB=X/USD/THB",
    #     "MYR=X/USD/MYR",
    #     "ZAR=X/USD/ZAR",
    #     "RUB=X/USD/RUB"
    # ]

    # pattern = r'(\w{3}/\w{3})'  # Define a regular expression pattern for XXX/YYY format
    dic = {}
    forex_symbols = ['GBP/USD', 'AUD/USD', 'NZD/USD', 'EUR/JPY', 'GBP/JPY', 'EUR/GBP', 'EUR/CAD', 'EUR/SEK', 'EUR/CHF', 'EUR/HUF', 'EUR/JPY', 'USD/CNY', 'USD/HKD', 'USD/SGD', 'USD/INR', 'USD/MXN', 'USD/PHP', 'USD/IDR', 'USD/THB', 'USD/MYR', 'USD/ZAR', 'USD/RUB']
#  [[-0.0036410471999999998, (552, 28, 872)], [-0.0037366807399999997, (781, 971, 10)], [-0.0022908795, (22, 316, 162)], [-0.007873680360000001, (664, 4, 265)], [-0.0068785982999999985, (189, 522, 947)], [-0.0019358036000000003, (824, 1124, 3)], [-0.0029315714400000004, (110, 322, 22)], [-0.00439623976, (160, 631, 613)], [-0.005215583999999999, (249, 4, 346)], [-0.00603495936, (549, 7, 327)], [-0.0024781679999999998, (10, 82, 107)], [-0.003242826399999999, (138, 587, 6)], [-0.00472372992, (114, 3, 413)], [-0.009469126400000001, (628, 960, 10)], [-0.0047135648, (217, 5, 774)], [-0.0050740614, (680, 959, 13)], [-0.0034603264, (365, 17, 652)], [-0.004908023759999999, (219, 19, 361)], [-0.004967219399999999, (459, 2, 251)], [-0.003455264340000001, (318, 1243, 449)], [-0.004013453839999999, (100, 1555, 790)], [-0.005844654, (264, 3, 159)], [-0.0023328914399999997, (6, 48, 288)], [-0.00520546932, (539, 10, 341)], [-0.005572400459999999, (370, 3, 218)], [-0.0059221833999999985, (301, 7, 325)], [-0.0052228288, (12, 942, 1080)], [-0.003340869839999999, (200, 823, 486)], [-0.0021226077600000003, (92, 1500, 1117)], [-0.0041306606200000005, (632, 28, 704)], [-0.006237546479999997, (318, 7, 153)], [-0.005519434680000002, (287, 6, 158)], [-0.003508073160000001, (275, 1169, 109)], [-0.005885165239999999, (552, 7, 332)], [-0.004507456000000001, (780, 7, 850)], [-0.005233001199999999, (397, 4, 1031)], [-0.00387193914, (615, 29, 710)], [-0.006027344399999999, (313, 6, 160)], [-0.005166881600000001, (348, 7, 186)], [-0.005667141999999999, (527, 7, 482)], [-0.004050597599999999, (197, 267, 279)], [-0.0024576116399999998, (11, 137, 773)], [-0.004434063659999999, (887, 3, 741)], [-0.00583247952, (649, 10, 425)], [-0.005388838359999999, (625, 11, 400)], [-0.0047763198399999995, (162, 255, 387)], [-0.005267606400000001, (527, 10, 466)], [-0.00541825768, (214, 520, 803)], [-0.0028828072000000003, (11, 1383, 543)], [-0.005273950499999998, (611, 177, 477)]]
    for symbol in forex_symbols:
        # symbol = "USD/MYR"
        try:
            df = formatDataset2(formatDataset3(grabForex(5000, symbol)))
        except:
            time.sleep(20)
            try:
                df = formatDataset2(formatDataset3(grabForex(5000, symbol)))
            except:
                time.sleep(60)
                try:
                    df = formatDataset2(formatDataset3(grabForex(5000, symbol)))
                except:
                    df = formatDataset2(formatDataset3(grabForex(5000, symbol, api_key)))


        lstOfSTOCH = [[-0.0036595020000000007, (306, 1160, 65)], [-0.0025738323599999993, (248, 285, 110)], [-0.004333462979999998, (387, 305, 30)], [-0.005231572480000001, (490, 902, 45)], [-0.004202634480000001, (157, 266, 379)], [-0.0041820948, (510, 3, 1299)], [-0.0026473022999999995, (16, 701, 47)], [-0.0032088980000000013, (22, 1270, 687)], [-0.0060800640000000005, (1028, 2, 377)], [-0.007275989699999999, (163, 729, 772)], [-0.0023530499999999993, (228, 266, 236)], [-0.00416798928, (521, 1233, 206)], [-0.00479654784, (558, 902, 46)], [-0.0025730370000000002, (160, 479, 467)], [-0.00580572168, (161, 1412, 677)], [-0.0028927750800000008, (660, 34, 967)], [-0.00368683392, (307, 5, 440)], [-0.00358271296, (325, 6, 375)], [-0.003948432, (157, 544, 911)], [-0.00319713408, (18, 1349, 1196)], [-0.00262826244, (444, 63, 361)], [-0.00269068044, (545, 440, 67)], [-0.0047963260800000015, (112, 297, 745)], [-0.0050593536, (879, 4, 733)], [-0.004126813599999999, (685, 1488, 4)], [-0.0033684503400000006, (17, 1295, 493)], [-0.004405479, (199, 524, 922)], [-0.0029330875199999997, (220, 473, 565)], [-0.005074094160000001, (301, 8, 367)], [0.0065204838999999995, (802, 622, 624)], [0.006250435200000001, (712, 589, 855)], [-0.0029458338, (255, 1188, 397)], [-0.00298893924, (13, 256, 207)], [-0.0038876421599999995, (435, 4, 862)], [-0.0025975487999999997, (12, 701, 159)], [0.006811176959999999, (848, 458, 827)], [-0.0041820671999999995, (274, 5, 888)], [-0.0033313444800000002, (377, 1180, 80)], [-0.00349536528, (560, 900, 50)], [-0.00573291192, (860, 4, 745)], [-0.0056427032999999995, (1074, 2, 429)], [-0.0033064091200000006, (9, 954, 993)], [-0.00396510924, (533, 8, 498)], [-0.0032399749200000007, (240, 1155, 709)], [0.004977112, (873, 421, 848)], [-0.0023886046799999994, (10, 849, 1893)], [-0.0028187827200000007, (688, 936, 3)], [-0.0023896470000000004, (832, 899, 8)], [-0.0057679928999999994, (594, 183, 499)], [0.014318088120000003, (820, 583, 676)], [-0.0054397151999999995, (1282, 3, 141)], [-0.004120711500000001, (276, 717, 437)], [-0.00449960896, (192, 254, 322)], [-0.004434624000000001, (724, 5, 975)], [-0.005296991720000001, (545, 8, 465)], [-0.0027132729, (511, 618, 121)], [-0.0030889949999999998, (406, 1192, 114)], [-0.0038027711999999996, (218, 22, 400)], [0.00639962304, (818, 572, 706)], [-0.0039729004, (613, 2, 274)], [0.008192325120000002, (868, 572, 623)], [-0.00374260304, (575, 180, 511)], [-0.0047263447, (524, 1260, 14)], [-0.0032079068000000002, (986, 565, 6)], [-0.0035119979999999992, (205, 469, 570)], [-0.0024841075000000003, (214, 281, 8)], [-0.006951868159999999, (1065, 2, 351)], [-0.005544215040000001, (995, 3, 364)], [-0.0022758845, (27, 326, 210)], [-0.003874995199999999, (126, 2, 846)], [-0.002819488, (366, 128, 59)], [-0.0037380230999999988, (203, 596, 488)], [-0.00395376696, (625, 11, 432)], [0.0030529804799999997, (830, 627, 543)], [-0.0060941493, (179, 733, 668)], [-0.00391227564, (311, 691, 532)], [-0.004154170999999999, (660, 1468, 6)], [-0.004839357600000002, (149, 1396, 655)], [-0.004094971199999999, (169, 608, 564)], [-0.0037416397200000003, (302, 1152, 576)], [-0.0063461816, (1028, 2, 377)], [-0.005505500800000001, (1081, 3, 724)], [-0.004937617, (132, 275, 851)], [-0.0029464032000000003, (461, 635, 16)], [0.0085965208, (387, 863, 1063)], [-0.00288311092, (659, 34, 971)], [-0.0035764016400000004, (17, 313, 325)], [0.01022603736, (810, 760, 449)], [-0.0047698739999999995, (240, 148, 8)], [-0.00300526556, (511, 312, 97)], [-0.004212076, (260, 110, 436)], [-0.0042729315, (193, 293, 14)], [-0.00217357776, (235, 318, 44)], [-0.00288894804, (545, 22, 203)], [-0.00520862848, (837, 1021, 4)], [-0.003975075000000001, (188, 292, 13)], [-0.006241995899999999, (171, 727, 722)], [-0.0029833048399999992, (285, 310, 72)], [-0.0034004408400000008, (17, 934, 1379)], [-0.0028523999999999993, (23, 315, 189)], [-0.0033890304, (285, 298, 47)], [-0.00347627592, (210, 160, 6)], [-0.0036826035999999998, (482, 642, 69)], [-0.0024321401999999994, (11, 1030, 447)], [-0.0039770280000000005, (355, 3, 203)], [-0.0066572296, (1024, 2, 381)], [-0.00340716536, (20, 942, 1257)], [-0.00292596172, (230, 730, 530)], [-0.0039467688, (323, 14, 737)], [-0.00495581184, (158, 259, 399)], [-0.0043381007999999995, (264, 7, 291)], [-0.0027398359799999995, (13, 742, 91)], [-0.00392392104, (734, 5, 967)], [-0.0041456869999999995, (685, 1488, 4)], [-0.00304717326, (12, 967, 1320)], [-0.0029432020800000003, (425, 192, 749)], [-0.00202221936, (13, 1298, 491)], [-0.00469004526, (571, 521, 29)], [-0.006113438099999999, (179, 730, 651)], [-0.004899348479999999, (320, 144, 16)], [0.00875800512, (875, 580, 592)], [-0.0062180412, (654, 10, 387)], [0.008319612, (554, 759, 926)], [0.005915592, (648, 790, 639)], [-0.0016746432800000001, (90, 1000, 951)], [-0.00516849608, (797, 5, 836)], [-0.0057239204000000005, (153, 1403, 598)], [-0.0044218592, (163, 261, 376)], [-0.0027790185600000002, (17, 316, 290)], [-0.00511894188, (636, 25, 772)], [-0.00673400448, (872, 5, 798)], [-0.00367766, (31, 908, 853)], [-0.005961998599999999, (513, 901, 22)], [-0.0055994736, (966, 3, 732)], [-0.0044689175999999995, (655, 11, 378)], [-0.0024830769600000004, (466, 189, 680)], [-0.004462244159999999, (491, 303, 53)], [-0.004665027000000001, (267, 723, 462)], [-0.004267863600000001, (895, 11, 697)], [-0.003950290959999999, (234, 1156, 1030)], [0.0054002495999999995, (642, 775, 691)], [-0.0060800640000000005, (1028, 2, 377)], [0.00362504736, (525, 799, 873)], [-0.004105863600000001, (160, 516, 1171)], [-0.005043289440000001, (522, 1260, 13)], [-0.004072425280000001, (13, 1265, 809)], [-0.0032602499999999993, (17, 1742, 1316)], [-0.005008359299999999, (346, 320, 6)], [-0.0027267730600000002, (429, 203, 818)], [-0.004015536, (264, 313, 80)], [-0.00428007096, (340, 152, 16)], [-0.0027987773400000005, (588, 967, 45)], [-0.006679007999999999, (869, 5, 805)], [0.00338498496, (475, 883, 798)], [0.0030130780799999994, (1127, 1303, 4)], [0.01968179472, (729, 800, 439)], [-0.004599336, (523, 8, 564)], [-0.00243649296, (39, 930, 872)], [-0.00337906296, (246, 1223, 934)], [-0.0050602624, (1309, 2, 146)], [0.004708468919999999, (868, 492, 760)], [0.00480492, (606, 781, 756)], [-0.0045210374000000005, (377, 4, 333)], [-0.002170347199999999, (7, 153, 110)], [-0.0031128290600000007, (364, 1262, 368)], [-0.00325581824, (1161, 4, 396)], [-0.00434154864, (888, 6, 811)], [-0.0023053258800000004, (394, 835, 332)], [-0.0062242404, (509, 902, 20)], [0.00483190848, (489, 773, 1063)], [-0.0039553722000000005, (451, 176, 719)], [-0.0062754093, (164, 728, 770)], [-0.00269029728, (28, 301, 195)], [-0.0030095480799999996, (380, 189, 719)], [-0.0048199370400000005, (20, 1750, 1839)], [-0.00347776416, (15, 1837, 165)], [-0.005296991720000001, (545, 8, 465)], [-0.0030166914000000003, (770, 98, 685)], [-0.00346217976, (339, 4, 515)], [-0.004033632, (326, 12, 799)], [-0.003067980159999999, (28, 911, 796)], [0.010073757119999999, (445, 783, 1133)], [-0.005950799999999999, (173, 726, 686)], [-0.0046785792, (317, 141, 23)], [-0.004239948799999999, (6, 985, 1675)], [-0.0034203989999999997, (296, 5, 146)], [-0.0054763763199999985, (249, 145, 16)], [-0.004373911079999998, (291, 7, 161)], [-0.0037284522600000004, (47, 1294, 774)], [-0.004905882060000001, (823, 518, 24)], [-0.0044217717, (139, 1400, 706)], [0.005419774079999999, (578, 776, 827)], [-0.003227212799999999, (259, 121, 447)], [-0.00510046308, (355, 155, 18)], [-0.0033731372799999993, (391, 1076, 3)], [-0.0031857487199999997, (15, 700, 57)], [-0.0042364481999999995, (517, 8, 268)], [-0.00488415304, (267, 115, 468)], [-0.0046827645000000005, (167, 524, 1007)], [-0.00248556528, (173, 293, 7)], [-0.00364277088, (609, 9, 180)], [-0.0040559191199999985, (313, 6, 160)], [-0.0035022855999999993, (188, 566, 508)], [-0.0032477321800000007, (248, 1241, 929)], [-0.006959687679999999, (1061, 2, 354)], [-0.0032527995, (156, 588, 482)], [-0.003651137100000001, (666, 16, 270)], [-0.0027218620000000002, (569, 911, 36)], [-0.0031424236799999995, (281, 309, 75)], [-0.0027307207200000004, (160, 908, 10)], [-0.007240370400000001, (660, 960, 10)], [-0.00223166208, (6, 988, 997)], [-0.00434968188, (425, 2, 242)], [-0.0033696194400000008, (403, 1166, 387)], [-0.0023396518400000004, (470, 125, 112)], [-0.0049080752000000005, (535, 7, 488)], [-0.00198434404, (42, 694, 4)], [-0.004519579500000001, (540, 109, 803)], [-0.00536470322, (649, 7, 914)], [-0.003083535, (637, 489, 47)], [-0.0034632, (15, 1837, 165)], [-0.00438926112, (413, 4, 267)], [-0.005095171579999999, (298, 9, 367)], [-0.004794739839999999, (163, 1425, 854)], [-0.005296991720000001, (545, 8, 465)], [-0.003905585839999999, (130, 275, 743)], [-0.0025034436000000004, (42, 330, 6)], [-0.00395681832, (951, 494, 7)], [-0.0034920529599999995, (171, 509, 878)], [-0.0040243112, (400, 4, 280)], [-0.005335616999999999, (583, 8, 907)], [-0.0040320454, (345, 303, 22)], [-0.0053205776, (348, 308, 13)], [-0.0021383595, (685, 87, 695)], [-0.004577255400000001, (375, 1184, 120)], [-0.004459356720000001, (140, 243, 893)], [-0.00295508304, (267, 1087, 864)], [-0.0038867263199999997, (359, 314, 21)], [-0.00453002264, (99, 1537, 849)], [-0.005683334720000001, (869, 3, 761)], [0.00298318464, (750, 572, 806)], [-0.0036646687000000005, (463, 6, 638)], [-0.00343872894, (561, 2, 390)], [-0.004390199, (667, 1468, 3)], [0.01183350588, (526, 796, 878)], [-0.00501605808, (717, 3, 972)], [-0.004220676720000001, (573, 1141, 19)], [-0.0034090201600000007, (108, 2, 680)], [-0.004483295640000001, (392, 158, 11)], [-0.00557477128, (174, 619, 599)], [-0.00404080374, (16, 1268, 648)], [-0.002764843619999999, (29, 910, 709)], [-0.0036301708799999994, (174, 2, 441)], [-0.003015689400000001, (296, 314, 37)], [-0.00573291192, (860, 4, 745)], [-0.0042488269200000005, (441, 12, 593)], [-0.0026484710999999995, (503, 623, 118)], [-0.001989765, (65, 758, 5)], [-0.00293807304, (15, 1348, 610)], [-0.0033594432, (679, 34, 1005)], [-0.005077363200000001, (110, 299, 634)], [-0.0030760004000000003, (285, 1246, 511)], [-0.004297161599999999, (195, 565, 467)], [0.02199093344, (426, 755, 1271)], [-0.007313311040000002, (979, 2, 498)], [-0.004015380599999999, (416, 904, 10)], [-0.00314122316, (141, 1177, 350)], [-0.0056399050599999995, (320, 10, 599)], [-0.0030678425999999996, (216, 468, 546)], [-0.0036639634200000006, (761, 527, 25)], [-0.00339682896, (536, 1229, 195)], [-0.0031177250999999996, (241, 486, 446)], [-0.00480935576, (227, 539, 747)], [-0.00254496656, (694, 860, 20)], [0.006476318940000001, (752, 587, 766)], [-0.003442607400000001, (370, 150, 21)], [-0.0034666936200000004, (517, 1568, 152)], [-0.003576142080000001, (243, 22, 354)], [-0.0038706363000000003, (184, 467, 626)], [-0.00451144512, (504, 906, 21)], [-0.0032772366000000004, (255, 1248, 570)], [-0.005749471000000001, (855, 5, 825)], [-0.0048736458000000005, (155, 1405, 625)], [-0.0029831637, (483, 202, 662)], [-0.004501024, (788, 7, 850)], [-0.005018915999999999, (147, 260, 631)], [-0.00457851468, (296, 10, 374)], [-0.004501024, (788, 7, 850)], [-0.0038598370800000006, (488, 6, 652)], [-0.0033176415999999994, (250, 20, 329)], [-0.0029599965, (8, 297, 247)], [-0.00507245728, (316, 727, 370)], [-0.0029108508000000003, (34, 1329, 406)], [-0.002170347199999999, (7, 153, 110)], [-0.0059547390000000006, (908, 492, 12)], [-0.0023050099799999998, (285, 1372, 725)], [-0.0037774105200000002, (739, 6, 922)], [-0.0028637667, (501, 1305, 7)], [-0.00332259438, (16, 1345, 629)], [-0.0026492100800000005, (253, 707, 532)], [-0.0023371068199999996, (29, 308, 236)], [-0.00351317648, (1301, 5, 212)], [-0.0036834940800000004, (148, 251, 420)], [-0.0032892584400000006, (107, 2, 294)], [-0.004583487999999999, (411, 3, 239)], [-0.005224525800000001, (164, 1409, 695)], [-0.0032187564, (676, 15, 222)], [-0.006870959940000001, (517, 901, 23)], [-0.003440733120000001, (204, 1161, 924)], [-0.00656205, (680, 958, 11)], [-0.00431433116, (154, 461, 639)], [-0.007256724480000001, (698, 959, 11)], [0.0030727052999999995, (903, 411, 836)], [-0.0037696931999999994, (573, 904, 58)], [-0.0030659538, (271, 1197, 368)], [-0.004208572799999999, (360, 156, 14)], [-0.0034330114000000003, (318, 18, 314)], [-0.0030097919600000004, (507, 313, 93)], [-0.00546711704, (190, 520, 972)], [-0.00448227546, (322, 9, 1246)], [-0.0036734235199999995, (901, 12, 684)], [-0.0028960890000000006, (139, 1178, 279)], [-0.00422734848, (309, 134, 15)], [-0.0024364189200000003, (89, 295, 269)], [-0.0033796627200000004, (210, 21, 392)], [-0.0055914948, (176, 724, 635)], [-0.0072180801, (162, 729, 778)], [-0.00644114592, (918, 2, 556)], [-0.00544508096, (187, 1650, 623)], [-0.0034980145200000003, (254, 1088, 836)], [-0.003311361200000001, (568, 1206, 184)], [-0.005171726400000001, (529, 7, 487)], [-0.0030480422400000003, (629, 13, 500)], [-0.0046595840000000005, (815, 7, 839)], [-0.0034142169600000004, (317, 160, 5)], [-0.0022553927200000008, (21, 693, 40)], [0.01024721614, (823, 759, 433)], [-0.004318704000000001, (965, 495, 7)], [-0.004025737799999999, (129, 313, 648)], [-0.003835402200000001, (320, 748, 353)], [-0.0037619097599999995, (272, 7, 269)], [-0.0034090201600000007, (108, 2, 680)], [-0.0039134034, (511, 6, 623)], [-0.0035520912000000003, (610, 32, 722)], [-0.0056121841599999995, (166, 523, 1018)], [-0.00517383592, (799, 5, 835)], [0.010060129239999998, (521, 781, 935)], [-0.00342517376, (16, 1348, 644)], [-0.0032706402000000005, (207, 550, 513)], [-0.00208403712, (8, 1226, 705)], [-0.005999586299999998, (171, 734, 732)], [-0.002582112, (12, 2398, 179)], [-0.0035586460800000005, (115, 297, 993)], [-0.004488825900000001, (227, 525, 727)], [-0.00259212798, (837, 138, 472)], [-0.0028083344800000007, (6, 3610, 143)], [-0.0039058185999999995, (199, 461, 603)], [-0.00267261228, (859, 45, 682)], [-0.0037510902000000004, (751, 516, 21)], [-0.0038332969200000006, (492, 304, 65)], [-0.0032676150000000006, (643, 1449, 3)], [-0.0046690505999999994, (141, 264, 862)], [-0.006801145999999999, (171, 627, 624)], [-0.0037054416000000005, (554, 28, 913)], [-0.004683616, (830, 7, 834)], [0.010907471539999998, (840, 411, 924)], [-0.005107778360000001, (600, 5, 894)], [-0.0034655257599999992, (316, 2, 160)], [-0.002213286, (308, 1297, 915)], [-0.0061020837, (179, 732, 666)], [-0.00646545984, (377, 305, 26)], [-0.0043420662, (196, 564, 464)], [-0.007256724480000001, (698, 959, 11)], [-0.0032185280400000003, (667, 115, 593)], [-0.00328060106, (353, 1248, 439)], [-0.0045941820000000005, (358, 924, 15)], [-0.00425998872, (508, 3, 1303)], [-0.0047292561, (315, 690, 527)], [-0.005998320899999999, (173, 734, 718)], [-0.00548224776, (690, 8, 890)], [-0.004502208000000001, (778, 7, 853)], [-0.004019018960000001, (103, 1554, 785)], [-0.004550691599999999, (135, 230, 909)], [0.0082538736, (849, 591, 606)], [-0.004502208000000001, (778, 7, 853)], [0.0053914088399999996, (786, 494, 903)], [-0.004463353440000001, (212, 1137, 1037)], [-0.0041099931599999995, (401, 1168, 387)], [-0.00517271808, (493, 903, 45)], [-0.0031948689999999995, (343, 63, 453)], [-0.004718271599999999, (156, 620, 586)], [-0.0024697722, (408, 70, 372)], [-0.0028187827200000007, (688, 936, 3)], [-0.004154892959999999, (127, 319, 664)], [-0.004401963000000002, (267, 158, 13)], [-0.0043770603, (161, 531, 950)], [-0.004974977880000002, (324, 1168, 56)], [-0.0030678425999999996, (216, 468, 546)], [-0.0019284600000000003, (1254, 398, 5)], [-0.0034336567200000004, (16, 314, 307)], [-0.0046925424, (135, 230, 909)], [-0.0035648424000000005, (544, 1529, 180)], [-0.0030094500000000003, (643, 1449, 3)], [-0.0026265787200000002, (688, 910, 42)], [-0.0020011171199999997, (34, 943, 492)], [-0.004106043899999999, (191, 466, 664)], [-0.0052649964, (503, 893, 47)], [-0.004475399320000001, (275, 159, 16)], [-0.0036060843000000017, (320, 6, 142)], [-0.0020978971199999996, (33, 1641, 1092)], [-0.00204521108, (59, 1958, 869)], [-0.0039063786000000005, (266, 313, 76)], [-0.003770224639999999, (315, 294, 48)], [-0.0030509879400000004, (421, 1170, 364)], [-0.005070710399999999, (882, 4, 730)], [-0.0041056848, (263, 299, 101)], [-0.003166135840000001, (134, 2, 142)], [-0.0041133190799999995, (687, 6, 890)], [-0.002796120000000001, (132, 2, 115)], [-0.004298974600000001, (304, 144, 21)], [-0.005036042700000001, (1008, 2, 809)], [-0.0040140954, (199, 599, 497)], [-0.00644114592, (918, 2, 556)], [-0.00481612608, (374, 4, 337)], [-0.0025991099399999998, (13, 301, 258)], [-0.0064519502400000005, (918, 2, 556)], [-0.0019509070799999999, (617, 483, 54)], [-0.0031112121599999997, (274, 18, 389)], [-0.0029861456800000003, (15, 1174, 1217)], [-0.004404492799999999, (13, 1291, 680)], [-0.0028383660000000006, (653, 922, 18)], [-0.005364889400000001, (582, 7, 197)], [-0.0021281988, (473, 168, 577)], [0.00985750836, (896, 567, 600)], [0.00609917308, (437, 876, 927)], [-0.0034201202400000004, (13, 1327, 208)], [-0.00409145282, (258, 148, 9)], [-0.002486955, (497, 626, 119)], [-0.00434154864, (888, 6, 811)], [-0.004502208000000001, (778, 7, 853)], [0.0036633761999999995, (337, 789, 1298)], [-0.0048132, (893, 10, 699)], [-0.00166755456, (262, 1064, 1196)], [-0.004223330400000001, (327, 10, 923)], [-0.0025664088, (185, 905, 1042)], [-0.0033978159600000003, (229, 1290, 820)], [-0.0046261851, (322, 720, 324)], [-0.00671682816, (872, 5, 798)], [-0.0030230647199999995, (583, 1171, 43)], [-0.005128362240000002, (251, 146, 17)], [-0.0048619662, (305, 10, 366)], [-0.0037910116999999998, (444, 308, 39)], [-0.0045219328000000005, (377, 4, 333)], [-0.004150727660000001, (661, 28, 771)], [-0.0034147581999999996, (321, 18, 315)], [-0.0042753774, (396, 158, 10)], [-0.0028478267999999998, (221, 26, 381)], [0.007298976, (859, 461, 805)], [-0.003947278880000001, (359, 8, 861)], [-0.004385619899999999, (598, 181, 484)], [-0.006759603899999999, (162, 733, 790)], [-0.0058241295, (198, 614, 563)], [-0.00417787656, (643, 9, 1155)], [-0.0025873824599999995, (290, 1255, 482)], [0.005084979839999999, (660, 764, 687)], [-0.0040158552, (159, 247, 603)], [-0.004226292, (616, 1553, 128)], [-0.0038435124, (362, 10, 1291)], [-0.005662912, (539, 902, 17)], [-0.0021972010399999996, (69, 1881, 365)], [-0.0027096888, (490, 152, 6)], [-0.0031541711599999997, (346, 17, 270)], [-0.0033277743000000005, (486, 191, 644)], [-0.00280239828, (87, 5, 63)], [-0.0029907935, (11, 1055, 259)], [-0.0024690636800000004, (828, 35, 717)], [-0.004406794560000001, (267, 300, 89)], [-0.004665027000000001, (267, 723, 462)], [-0.00340715904, (384, 1183, 78)], [-0.00673400448, (872, 5, 798)], [-0.0029777304, (80, 252, 713)], [-0.004079531040000001, (722, 7, 925)], [-0.004219840000000001, (741, 4, 935)], [-0.005231572480000001, (490, 902, 45)], [-0.0023321056000000003, (96, 338, 11)], [-0.003230642560000001, (537, 323, 82)], [-0.004475399320000001, (275, 159, 16)], [-0.0033887664000000002, (30, 912, 817)], [-0.0033787950000000004, (20, 1517, 1093)], [0.006497124479999999, (450, 892, 813)], [-0.0028582400000000006, (316, 37, 499)], [-0.00400477608, (402, 4, 340)], [-0.004744040400000001, (14, 1269, 551)], [-0.0035287122, (667, 3, 828)], [-0.00606356772, (637, 10, 381)], [-0.0035049050399999994, (325, 730, 355)], [-0.005749471000000001, (855, 5, 825)], [-0.002996868, (638, 40, 952)], [-0.0023763347999999998, (631, 472, 60)], [-0.0022109568, (61, 313, 472)], [-0.0026212040399999996, (349, 1524, 65)], [-0.00453379476, (182, 284, 174)], [-0.004568999820000001, (522, 1262, 16)], [-0.00453974664, (488, 303, 54)], [-0.00487985082, (882, 9, 417)], [-0.004514601, (950, 9, 382)], [-0.0045880925999999995, (386, 301, 44)], [-0.0049194719200000014, (646, 16, 379)], [-0.0035598528, (144, 287, 903)], [0.021686792400000005, (798, 759, 468)], [-0.0036863833599999995, (611, 191, 471)], [-0.004509930300000001, (199, 525, 888)]]
        sumN = 0
        for i in range(len(lstOfSTOCH)):
            print(lstOfSTOCH[i])
            aVal = bVal = cVal = lstOfSTOCH[i][1][0], lstOfSTOCH[i][1][1], lstOfSTOCH[i][1][2] 
            aVal = aVal[0]
            bVal = bVal[1]
            cVal = cVal[2]
            bestSpecialValue, BestSpecialValues, worstSpecialValue, WorstSpecialValues = simulateCrypto(df, aVal, bVal, cVal)
            print(worstSpecialValue)
            if worstSpecialValue == 9223372036854775807:
                continue
            if dic.get(i) is not None:
                dic[i].append(worstSpecialValue)
            else:
                dic[i] = [worstSpecialValue]
            sumN+=worstSpecialValue
        print("\n\n\nBEST: " + str(round((sumN/len(lstOfSTOCH)), 5)))
        print(symbol)
        print("\n\n\n")
        print(dic)
    f = open('Indicatorstats.txt', 'w')
    f.write(str(dic))
    f.close()